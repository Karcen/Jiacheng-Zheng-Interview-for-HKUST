clear all
%% Basic sets
S=77;                  % number of countries
n=45;                 % number of sectors
nfd=6;  % number of finaldemand

    % 创建文件路径
    filepath = 'E:\China_vs_India\PAK\Wang\2019\2019_SML.csv'
    
     G = xlsread(filepath);

% G=xlsread('E:\China_vs_India\PAK\Wang\1996\1996_SML.csv');


% 从excel中读取数据 
fd=G([1:N*S],[N*S+1:(N*S+nfd*S)]);             %提出最终需求矩阵。     
FD = squeeze(sum(reshape(fd,S*N,nfd,[]),2));
GRTR_FNL_cs_c = FD(1:S*N,1:S);
VA=G([S*N+2], [1:S*N]);                  % 取增加值, confirm value added in matlab and excel
AA=G([1:S*N], [1:S*N]);                 %取中间投入矩阵816*816 


TI=squeeze(sum(reshape(AA,S*N,N,[]),2))+GRTR_FNL_cs_c;    %取总投入 Total Input
TI = sum(TI,2);
A=AA./repmat(TI,1,S*N)'; 
A(isnan(A))=0;
A(isinf(A))=0; 
% vtest=1-sum(A);  %

v = VA./TI';
v(isnan(v))=0;
v(isinf(v))=0;


I=eye(S*N);                          %单位矩阵,单位矩阵生成函数
I1=eye(N);                           %部门数的单位矩阵
B=I/(I-A);                          %求列奥列夫逆矩阵，这个矩阵是一个全局的逆矩阵。



FB=cell(S,S);                           
for i=1:1:S
    for j=1:1:S
FB{i,j}=B([(i-1)*n+1:i*n],[(j-1)*n+1:j*n]);  %提取分块矩阵，取B中的j对i国家的完全消耗系数矩阵。
    end
end                                     


%% Method 2
Y=sum(FD,2);

start_id=1;
end_id=n;  % number of sectors 4
for i=1:S   % number of countries 3
Yd(start_id:end_id)=FD(start_id:end_id,i);
    start_id=end_id+1;
    end_id=end_id+n;
end
Yd=Yd';

Yf=Y-Yd;

%% BLOCK A
A_subMatrices = cell(S,S);

for i = 1:S
    for j = 1:S
        A_subMatrix = A((n*(i-1)+1):(n*i), (n*(j-1)+1):(n*j));
        A_subMatrices {i,j} = A_subMatrix;
    end
end

%%  CREATE Ad, Af
Ad=zeros(S*n);
start_id=1;
end_id=n;
for i=1:S
Ad(start_id:end_id,start_id:end_id)=A_subMatrices{i,i};
    start_id=end_id+1;
    end_id=end_id+n;
end
Af=A-Ad;

%% CREATE Leontief inverse
L=inv(eye(S*n)-Ad);
VBY=diag(v)*B*diag(Y);
RVBY=sum(VBY,2);
CVBY=sum(VBY,1);

%%  CREATE Ad, Af
Ad=zeros(S*n);
start_id=1;
end_id=n;
for i=1:S
Ad(start_id:end_id,start_id:end_id)=A_subMatrices{i,i};
    start_id=end_id+1;
    end_id=end_id+n;
end
Af=A-Ad;


%% Equation 11:Therefore, the average pure domestic production length of a particular country equals the ratio of this portion of gross 
%output to the corresponding domestic value added, and can be expressed as7
result.PL_D_F=(diag(v)*L*L*Yd)./(diag(v)*L*Yd);
result.PL_D_B=(v*L*L*diag(Yd))./(v*L*diag(Yd));
result.PL_D=(diag(v)*L*L*diag(Yd))./(diag(v)*L*diag(Yd));

%% Equation 13  production of “traditional trade”
result.PL_RT_F=(diag(v)*L*L*Yf)./(diag(v)*L*Yf);
result.PL_RT_B=(v*L*L*diag(Yf))./(v*L*diag(Yf));
result.PL_RT=(diag(v)*L*L*diag(Yf))./(diag(v)*L*diag(Yf));


%% Equation 15
% Firstterm： DVA in bilateral intermediate exports directly absorbed in the importing country (VY_GVC_S)
VY_GVC_S_F=diag(v)*L*Af*L*Yd;
VY_GVC_S_B=v*L*Af*L*diag(Yd);
VY_GVC_S=diag(v)*L*Af*L*diag(Yd);

%second term: used by the importing country to produce the final or intermediate exports (indirect absorbed by direct importing country or re-exported to other countries, VY_GVC_C), respectively. 

VY_GVC_C_F=diag(v)*L*Af*(B*Y-L*Yd);
VY_GVC_C_B=v*L*Af*(B*diag(Y)-L*diag(Yd));
VY_GVC_C=diag(v)*L*Af*(B*diag(Y)-L*diag(Yd));


%% Equation 16
%term 1: Term 1 is the source country’s domestic gross outputs generated by the production of simple GVC exports, in which the source country’s domestic value added in intermediate exports 
%is directly consumed by its trading partners. We label it as         .
Xd_GVC_S_F=diag(v)*L*L*Af*L*Yd;
Xd_GVC_S_B=v*L*L*Af*L*diag(Yd);
Xd_GVC_S=diag(v)*L*L*Af*L*diag(Yd);

%term 2: Term 2 is the source country’s domestic gross outputs induced by production of complex GVC exports, in which the 
%source country’s value added is used by its partner country to produce exports.
Xd_GVC_C_F=diag(v)*L*L*Af*(B*Y-L*Yd);
Xd_GVC_C_B=v*L*L*Af*(B*diag(Y)-L*diag(Yd));
Xd_GVC_C=diag(v)*L*L*Af*(B*diag(Y)-L*diag(Yd));

%% Equation 17 Therefore, the average domestic length of GVC production can be computed as  
result.PLd_GVC_F=(diag(v)*L*L*Af*B*Y)./(diag(v)*L*Af*B*Y);
result.PLd_GVC_B=(v*L*L*Af*B*diag(Y))./(v*L*Af*B*diag(Y));
result.PLd_GVC=(diag(v)*L*L*Af*B*diag(Y))./(diag(v)*L*Af*B*diag(Y));


%% Equation 18: the total international gross outputs induced by domestic value-added of source 
%country embodied in its intermediate exports can be expressed as: 
%term1: Term 1 represents international gross outputs generated in the process between domestic 
% value-added of the source country embodied in its intermediate exports arriving at the importing 
% country, and the value-added absorbed by final products consumed in the importing country 
% without further border crossing.
Xvi_GVC_S_F=diag(v)*L*Af*L*L*Yd;
Xvi_GVC_S_B=v*L*Af*L*L*diag(Yd);
Xvi_GVC_S=diag(v)*L*Af*L*L*diag(Yd);

% Term 2 represents international gross 
% outputs generated in the process, starting from the domestic value-added of the source country 
% embodied in its intermediate exports and arriving at importing country until it is used in final 
% goods production for the source country or third countries.
Xvi_GVC_C_F=diag(v)*L*Af*(B*B*Y-L*L*Yd);
Xvi_GVC_C_B=v*L*Af*(B*B*diag(Y)-L*L*diag(Yd));
Xvi_GVC_C=diag(v)*L*Af*(B*B*diag(Y)-L*L*diag(Yd));


%% Equation 19 Therefore, the average international length of the source country’s GVC production 
result.PLi_GVC_F=(diag(v)*L*Af*B*B*Y)./(diag(v)*L*Af*B*Y);
result.PLi_GVC_B=(v*L*Af*B*B*diag(Y))./(v*L*Af*B*diag(Y));
result.PLi_GVC=(diag(v)*L*Af*B*B*diag(Y))./(diag(v)*L*Af*B*diag(Y));


%% Equation 20： Summing equations (16) and (18), we obtain the total average production length of domestic 
%value-added of the source country embodied in its bilateral intermediate exports as follows: 
result.PL_GVC_F=result.PLd_GVC_F+result.PLi_GVC_F;
result.PL_GVC_B=result.PLd_GVC_B+result.PLi_GVC_B;
result.PL_GVC=result.PLd_GVC+result.PLi_GVC;

%% Equation 19 Additional The average international production length of the two components are labeled as   and           respectively. 
PLd_GVC_S_F=Xd_GVC_S_F./VY_GVC_S_F;
PLd_GVC_S_B=Xd_GVC_S_B./VY_GVC_S_B;

PLi_GVC_S_F=Xvi_GVC_S_F./VY_GVC_S_F;
PLi_GVC_S_B=Xvi_GVC_S_B./VY_GVC_S_B;

result.PL_GVC_S_F=PLd_GVC_S_F+PLi_GVC_S_F;
result.PL_GVC_S_B=PLd_GVC_S_B+PLi_GVC_S_B;


PLd_GVC_C_F=Xd_GVC_C_F./VY_GVC_C_F;
PLd_GVC_C_B=Xd_GVC_C_B./VY_GVC_C_B;

PLi_GVC_C_F=Xvi_GVC_C_F./VY_GVC_C_F;
PLi_GVC_C_B=Xvi_GVC_C_B./VY_GVC_C_B;

result.PL_GVC_C_F=PLd_GVC_C_F+PLi_GVC_C_F;
result.PL_GVC_C_B=PLd_GVC_C_B+PLi_GVC_C_B;

%%
%%final results
result2.PL_D_F=reshape(result.PL_D_F, 45,77);
result2.PL_D_B=reshape(result.PL_D_B',45,77);
result2.PL_RT_F=reshape(result.PL_RT_F, 45,77);
result2.PL_RT_B=reshape(result.PL_RT_B', 45,77);
result2.PL_GVC_F=reshape(result.PL_GVC_F, 45,77);
result2.PL_GVC_B=reshape(result.PL_GVC_B', 45,77);
result2.PL_GVC_S_F=reshape(result.PL_GVC_S_F, 45,77);
result2.PL_GVC_S_B=reshape(result.PL_GVC_S_B', 45,77);
result2.PL_GVC_C_F=reshape(result.PL_GVC_C_F, 45,77);
result2.PL_GVC_C_B=reshape(result.PL_GVC_C_B', 45,77);



%%
Total_VaD_r=reshape(VA,[45, 77]);
Total_VaD_r_sum = sum(Total_VaD_r,1);

weight=Total_VaD_r./Total_VaD_r_sum;

country.PL_D_F=sum(weight.*result2.PL_D_F,1);
country.PL_D_B=sum(weight.*result2.PL_D_B,1);

country.PL_RT_F=sum(weight.*result2.PL_RT_F,1);
country.PL_RT_B=sum(weight.*result2.PL_RT_B,1);

country.PL_GVC_F=sum(weight.*result2.PL_GVC_F,1);
country.PL_GVC_B=sum(weight.*result2.PL_GVC_B,1);

country.PL_GVC_S_F=sum(weight.*result2.PL_GVC_S_F,1);
country.PL_GVC_S_B=sum(weight.*result2.PL_GVC_S_B,1);


country.PL_GVC_C_F=sum(weight.*result2.PL_GVC_C_F,1);
country.PL_GVC_C_B=sum(weight.*result2.PL_GVC_C_B,1);

%% For PAK
PAK.PL_D_F=result2.PL_D_F(:,56);
PAK.PL_D_B=result2.PL_D_B(:,56);
PAK.PL_RT_F=result2.PL_RT_F(:,56);
PAK.PL_RT_B=result2.PL_RT_B(:,56);
PAK.PL_GVC_F=result2.PL_GVC_F(:,56);
PAK.PL_GVC_B=result2.PL_GVC_B(:,56);
PAK.PL_GVC_S_F=result2.PL_GVC_S_F(:,56);
PAK.PL_GVC_S_B=result2.PL_GVC_S_B(:,56);
PAK.PL_GVC_C_F=result2.PL_GVC_C_F(:,56);
PAK.PL_GVC_C_B=result2.PL_GVC_C_B(:,56);

PAK.All.Forward=[PAK.PL_D_F  PAK.PL_RT_F  PAK.PL_GVC_F PAK.PL_GVC_S_F PAK.PL_GVC_C_F];
    
PAK.All.Backward=[PAK.PL_D_B PAK.PL_RT_B PAK.PL_GVC_B PAK.PL_GVC_S_B PAK.PL_GVC_C_B];











% % Y=[];
% % V=[];
% % B=[];
% % BB=[];
% % A=[];
% % u=[];
% % G=[];
% %Z=[];
% GG=inv(eye(3,3)-G)
% GGGG=GG*GG;
% VBBY=diag(V)*BB*diag(Y)
% VBY=diag(V)*B*diag(Y)
% PL=VBBY./VBY
% PLv=(diag(V)*BB*Y)./(diag(V)*B*Y)
% % PLy=V*BB*diag(Y)./(V*B*diag(Y))
% 
% PLy2=V*GGGG*diag(Y)./(V*GG*diag(Y))
% WLD=(V*BB*diag(Y)*u')/(V*B*diag(Y)*u')
% 
% PLyw=(V*BB*diag(Y)*u')./(V*B*diag(Y)*u')
% WLDPLv=sum(PLv.*V')./sum(V)
% WLDPLy=sum(PLy.*Y')./sum(Y)
% 
% B1=B-eye(3,3)
% BB1=B*B1
% APL=diag(V)*BB1*diag(Y)./diag(V)*B1*diag(Y)
% 
% APL_n=diag(V)*BB1*diag(Y)
% APL_d=diag(V)*B1*diag(Y)
% APL=APL_n./APL_d
% 
% APLv=(diag(V)*BB1*Y)./(diag(V)*B1*Y)
% 
% APL_WLDPLv=sum(APLv.*sum(Z,2))./sum(sum(Z,2))
% 
% APL_WLDPLy=sum(APLy2.*sum(Z,1))./sum(sum(Z,1))
% 
% 
% 
% G1=GG-eye(3,3)
% GG1=GG*G1
% APLY2_n=diag(V)*GG1*diag(Y)
% APLY2_d=diag(V)*G1*diag(Y)
% APL_y2=APLY2_n./APLY2_d
% APLy2=V*GG1*diag(Y)./(V*G1*diag(Y))
